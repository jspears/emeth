{"version":3,"sources":["../src/index.js"],"names":["diffTheme","themes","unshift","themeMap","idx","indexOf","splice","settings","debug","process","env","NODE_ENV","warn","themeClass","Clazz","displayName","names","cacheKey","join","notfound","ret","themeLength","length","i","r","l","name","String","trim","found","t","current","push"],"mappings":";;;;;;kBAQe,UAAUA,SAAV,EAAqB;AAChCC,WAAOC,OAAP,CAAeF,SAAf;AACAG,eAAW,EAAX;AACA,WAAO,YAAM;AACT,YAAMC,MAAMH,OAAOI,OAAP,CAAeL,SAAf,CAAZ;AACA,YAAII,MAAM,CAAC,CAAX,EAAc;AACVH,mBAAOK,MAAP,CAAc,CAAd,EAAiB,CAAjB;AACAH,uBAAW,EAAX;AACH;AACJ,KAND;AAOH,C;;AAlBD,IAAMF,SAAS,EAAf;AACA,IAAIE,WAAW,EAAf;AACA;;;;;;;;AAkBA;;;;;;;;AAQO,IAAMI,8BAAW;AACpBC,WAAOC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,YADX;AAEpBC,QAFoB,kBAEN;AACV,YAAI,KAAKJ,KAAT,EAAgB;AAAA;;AACZ,iCAAQI,IAAR;AACH;AACJ;AANmB,CAAjB;AAQP;;;;;AAKO,IAAMC,kCAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA,QACzBC,WADyB,GACTD,KADS,CACzBC,WADyB;;AAEjC,QAAI,CAACA,WAAL,EAAkB;AACdR,iBAASK,IAAT,wCAAqDE,KAArD;AACH;;AAED,WAAO,YAAc;AAAA,0CAAVE,KAAU;AAAVA,iBAAU;AAAA;;AACjB,YAAMC,WAAcF,WAAd,SAA6BC,MAAME,IAAN,CAAW,GAAX,CAAnC;AACA,YAAID,YAAYd,QAAhB,EAA0B;AACtB,mBAAOA,SAASc,QAAT,CAAP;AACH;AACD,YAAME,WAAc,EAApB;AACA,YAAMC,MAAc,EAApB;AACA,YAAMC,cAAcpB,OAAOqB,MAA3B;AACA,aAAK,IAAIC,IAAI,CAAR,EAAWC,IAAI,CAAf,EAAkBC,IAAIT,MAAMM,MAAjC,EAAyCC,IAAIE,CAA7C,EAAgDF,GAAhD,EAAqD;AACjD,gBAAMG,OAAOV,MAAMO,CAAN,CAAb;AACA,gBAAIG,QAAQ,IAAR,IAAgBA,SAAS,KAAzB,IAAkCA,SAAS,IAA3C,IAAmDC,OAAOD,IAAP,EACKE,IADL,MAEG,EAF1D,EAE8D;AAC1D;AACH;AACD,gBAAIC,QAAQ,KAAZ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,WAApB,EAAiCS,GAAjC,EAAsC;AAClC,oBAAMC,UAAU9B,OAAO6B,CAAP,EAAUf,WAAV,CAAhB;AACA,oBAAIgB,WAAWA,QAAQL,IAAR,CAAf,EAA8B;AAC1BN,wBAAII,GAAJ,IAAWO,QAAQL,IAAR,CAAX;AACAG,4BAAW,IAAX;AACH;AACJ;AACD;AACA,gBAAI,CAACA,KAAL,EAAY;AACRV,yBAASa,IAAT,CAAcN,IAAd;AACAN,oBAAII,GAAJ,IAAWE,IAAX;AACH;AACJ;AACD,YAAIP,SAASG,MAAb,EAAqB;AACjBf,qBAASK,IAAT,sDACIG,WADJ,EACiBI,SAASD,IAAT,CAAc,IAAd,CADjB;AAEH;;AAED,eAAQf,SAASc,QAAT,IAAqBG,IAAIF,IAAJ,CAAS,GAAT,CAA7B;AACH,KAnCD;AAoCH,CA1CM","file":"index.js","sourcesContent":["const themes = [];\nlet themeMap = {};\n/**\n * Adds a theme to the list of themes, returns a function that will remove said\n * theme\n *\n * @param diffTheme\n */\nexport default function (diffTheme) {\n    themes.unshift(diffTheme);\n    themeMap = {};\n    return () => {\n        const idx = themes.indexOf(diffTheme);\n        if (idx > -1) {\n            themes.splice(1, 0);\n            themeMap = {};\n        }\n    }\n}\n\n/**\n * Looks in the props for both ThemeClassName\n * and ClassName of the corresponding list of names.\n *\n * @param props\n * @param names\n * @returns {string}\n */\nexport const settings = {\n    debug: process.env.NODE_ENV != 'PRODUCTION',\n    warn(...args) {\n        if (this.debug) {\n            console.warn(...args);\n        }\n    }\n};\n/**\n * Takes a class you want to style\n * @param Clazz\n * @returns {function(...[*])}\n */\nexport const themeClass = (Clazz) => {\n    const { displayName } = Clazz;\n    if (!displayName) {\n        settings.warn(`no display name for themed class %s`, Clazz);\n    }\n\n    return (...names) => {\n        const cacheKey = `${displayName}/${names.join('.')}`;\n        if (cacheKey in themeMap) {\n            return themeMap[cacheKey];\n        }\n        const notfound    = [];\n        const ret         = [];\n        const themeLength = themes.length;\n        for (let i = 0, r = 0, l = names.length; i < l; i++) {\n            const name = names[i];\n            if (name == null || name === false || name === true || String(name)\n                                                                       .trim()\n                                                                   == '') {\n                continue;\n            }\n            let found = false;\n            for (let t = 0; t < themeLength; t++) {\n                const current = themes[t][displayName];\n                if (current && current[name]) {\n                    ret[r++] = current[name];\n                    found    = true;\n                }\n            }\n            //if no matching classes are found pass it through.\n            if (!found) {\n                notfound.push(name);\n                ret[r++] = name;\n            }\n        }\n        if (notfound.length) {\n            settings.warn(`could not find a className for '%s' for '%s' `,\n                displayName, notfound.join(', '));\n        }\n\n        return (themeMap[cacheKey] = ret.join(' '));\n    };\n}\n"]}